<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>42 Webserv - Ultimate Test Suite</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .test-section { margin-bottom: 30px; border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
        .test-case { margin: 10px 0; padding: 10px; background: #f5f5f5; border-radius: 3px; }
        .success { color: green; }
        .failure { color: red; }
        button { padding: 8px 12px; margin: 5px; cursor: pointer; }
    </style>
</head>
<body>
    <h1>42 Webserv Test Suite</h1>

    <!-- 1. Basic HTTP Tests -->
    <div class="test-section">
        <h2>1. HTTP Protocol Tests</h2>
        
        <div class="test-case">
            <h3>GET Requests</h3>
            <button onclick="testRequest('GET', '/')">Test Root (/)</button>
            <button onclick="testRequest('GET', '/nonexistent')">Test 404</button>
            <button onclick="testRequest('GET', '/../forbidden')">Test Path Traversal</button>
            <div id="get-result"></div>
        </div>

        <div class="test-case">
            <h3>POST Requests</h3>
            <button onclick="testPost('/upload', 'Test data')">Upload Small Data</button>
            <button onclick="testLargePost()">Upload 10MB File</button>
            <div id="post-result"></div>
        </div>

        <div class="test-case">
            <h3>DELETE Requests</h3>
            <button onclick="testRequest('DELETE', '/delete-test.txt')">Test DELETE</button>
            <div id="delete-result"></div>
        </div>
    </div>

    <!-- 2. CGI Tests -->
    <div class="test-section">
        <h2>2. CGI Script Tests</h2>
        
        <div class="test-case">
            <h3>Python CGI</h3>
            <button onclick="testRequest('GET', '/cgi/test.py?name=42')">Test GET Params</button>
            <button onclick="testPost('/cgi/test.py', 'post_data=test')">Test POST Input</button>
            <div id="cgi-result"></div>
        </div>

        <div class="test-case">
            <h3>Environment Variables</h3>
            <button onclick="testRequest('GET', '/cgi/env.py')">Show ENV</button>
            <div id="env-result"></div>
        </div>
    </div>

    <!-- 3. Advanced Tests -->
    <div class="test-section">
        <h2>3. Advanced Tests</h2>
        
        <div class="test-case">
            <h3>Chunked Transfer Encoding</h3>
            <button onclick="testChunked()">Test Chunked Upload</button>
            <div id="chunked-result"></div>
        </div>

        <div class="test-case">
            <h3>Concurrent Requests</h3>
            <button onclick="testConcurrent(10)">10 Requests</button>
            <button onclick="testConcurrent(100)">100 Requests</button>
            <div id="concurrent-result"></div>
        </div>
    </div>

    <!-- 4. Error Handling -->
    <div class="test-section">
        <h2>4. Error Handling</h2>
        
        <div class="test-case">
            <h3>Custom Error Pages</h3>
            <button onclick="testRequest('GET', '/invalid-page')">Test 404 Page</button>
            <button onclick="testRequest('GET', '/forbidden')">Test 403 Page</button>
            <div id="error-result"></div>
        </div>
    </div>

    <!-- Results Display -->
    <div class="test-section">
        <h2>Test Results</h2>
        <pre id="output"></pre>
    </div>

    <script>
        // Base test function
        async function testRequest(method, url) {
            const output = document.getElementById('output');
            output.textContent = `Testing ${method} ${url}...`;
            
            try {
                const response = await fetch(url, { method });
                const text = await response.text();
                output.textContent = `[${response.status}] ${method} ${url}\n\nHeaders:\n${formatHeaders(response.headers)}\n\nBody:\n${text}`;
            } catch (err) {
                output.textContent = `Error: ${err.message}`;
            }
        }

        // POST test with data
        async function testPost(url, data) {
            const output = document.getElementById('output');
            output.textContent = `Testing POST ${url}...`;
            
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    body: data,
                    headers: { 'Content-Type': 'text/plain' }
                });
                const text = await response.text();
                output.textContent = `[${response.status}] POST ${url}\n\nResponse:\n${text}`;
            } catch (err) {
                output.textContent = `Error: ${err.message}`;
            }
        }

        // Large file upload test
        async function testLargePost() {
            const output = document.getElementById('output');
            output.textContent = 'Preparing 10MB file...';
            
            // Create 10MB dummy file
            const blob = new Blob([new ArrayBuffer(10 * 1024 * 1024)]);
            
            try {
                output.textContent = 'Uploading 10MB file...';
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: blob,
                    headers: { 'Content-Type': 'application/octet-stream' }
                });
                output.textContent = `[${response.status}] Large file upload\nSize: 10MB`;
            } catch (err) {
                output.textContent = `Error: ${err.message}`;
            }
        }

        // Chunked transfer test
        async function testChunked() {
            const output = document.getElementById('output');
            output.textContent = 'Testing chunked transfer...';
            
            try {
                const response = await fetch('/chunked', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'text/plain',
                        'Transfer-Encoding': 'chunked'
                    },
                    body: new ReadableStream({
                        start(controller) {
                            controller.enqueue("5\r\nHello\r\n");
                            controller.enqueue("6\r\nWorld!\r\n");
                            controller.enqueue("0\r\n\r\n");
                            controller.close();
                        }
                    })
                });
                const text = await response.text();
                output.textContent = `[${response.status}] Chunked response:\n${text}`;
            } catch (err) {
                output.textContent = `Error: ${err.message}`;
            }
        }

        // Concurrent requests test
        async function testConcurrent(count) {
            const output = document.getElementById('output');
            output.textContent = `Starting ${count} concurrent requests...`;
            
            const start = Date.now();
            const promises = [];
            
            for (let i = 0; i < count; i++) {
                promises.push(fetch(`/concurrency-test?req=${i}`));
            }
            
            try {
                const results = await Promise.all(promises);
                const elapsed = (Date.now() - start) / 1000;
                output.textContent = `Completed ${results.length} requests in ${elapsed.toFixed(2)}s\n` +
                                     `Success rate: ${results.filter(r => r.ok).length}/${count}`;
            } catch (err) {
                output.textContent = `Error: ${err.message}`;
            }
        }

        // Helper to format headers
        function formatHeaders(headers) {
            let result = '';
            headers.forEach((value, name) => {
                result += `${name}: ${value}\n`;
            });
            return result;
        }
    </script>
</body>
</html>